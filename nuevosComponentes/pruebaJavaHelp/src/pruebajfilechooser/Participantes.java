package pruebajfilechooser;

import java.io.File;
import java.io.IOException;
import java.lang.System.Logger;
import java.lang.System.Logger.Level;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author alba_
 */
public class Participantes extends javax.swing.JFrame {

    JFileChooser filechooser = new JFileChooser();
    File origen = new File("/");
    File des = new File("/");

    //Usando JColorChooser
    // Botón para elegir colores


    /**
     * Creates new form Paxina2
     */
    public Participantes() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        subirDNI = new javax.swing.JButton();
        guardarDNI = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Participantes");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon("F:\\03.DAM\\curso2024-2025\\DI\\tarefas\\pruebaJavaHelp\\img\\bfb25752-49bb-44a0-a577-359cf9d76b2a.jpg")); // NOI18N

        subirDNI.setText("Subir DNI");
        subirDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subirDNIActionPerformed(evt);
            }
        });

        guardarDNI.setText("Guardar DNI");
        guardarDNI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarDNIActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(115, 115, 115)
                                .addComponent(subirDNI)
                                .addGap(79, 79, 79)
                                .addComponent(guardarDNI))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(172, 172, 172)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subirDNI)
                    .addComponent(guardarDNI))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Participantes().setVisible(true);
            }
        });
    }
  
    private void guardarDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarDNIActionPerformed

        //Filtramos los archivos que se pueden seleccionar y solo mostrará los que tengan las extensiones indicadas.
        filechooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                 String name = file.getName().toLowerCase();
                return name.endsWith(".png") || name.endsWith(".jpg")
                        || name.endsWith(".jpeg") || name.endsWith(".pdf");
            }

            @Override
            public String getDescription() {
                return "Imágenes y documentos (*.png, *.jpg, *.jpeg, *.pdf)";
            }
        });

        int res = filechooser.showOpenDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            des = filechooser.getSelectedFile();

            Path or = Paths.get(origen.getAbsolutePath());
            Path dest = Paths.get(des.getAbsolutePath());

            try {
                Files.copy(or, dest, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {
                Logger.getLogger(Participantes.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            System.out.println("Se ha cancelado la subida");
        }
    }//GEN-LAST:event_guardarDNIActionPerformed

    private void subirDNIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subirDNIActionPerformed

        //usando un filtro para que nos filtre visualmente los archivos que se pueden seleccionar.
        //solo mostrará los que tengan las extensiones indicadas.
        filechooser.setFileFilter(new FileFilter() {
            @Override
            public boolean accept(File file) {
                 String name = file.getName().toLowerCase();
                return name.endsWith(".png") || name.endsWith(".jpg")
                        || name.endsWith(".jpeg") || name.endsWith(".pdf");
            }

            //Lo que aparecen en Files of type
            @Override
            public String getDescription() {
                return "Imágenes y documentos (*.png, *.jpg, *.jpeg, *.pdf)";
            }
        });

        int res = filechooser.showOpenDialog(null);
        if (res == JFileChooser.APPROVE_OPTION) {
            origen = filechooser.getSelectedFile();

            // si queremos que el mismo botón lo suba y lo guarde añadimos esto:
            Path or = Paths.get(origen.getAbsolutePath());
            File destinofichero = new File("C:\\Users\\alba_\\Downloads\\pelis_torrent", origen.getName());
            Path dest = Paths.get(destinofichero.getAbsolutePath());
            try {
                Files.copy(or, dest, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException ex) {
                Logger.getLogger(Participantes.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            System.out.println("Se ha cancelado la subida");
        }
    }//GEN-LAST:event_subirDNIActionPerformed

    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton guardarDNI;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton subirDNI;
    // End of variables declaration//GEN-END:variables

   

}
